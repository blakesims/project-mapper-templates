<?xml version='1.0' encoding='utf-8'?>
<project-rules extends="base.xml">
    <development-rules>
        <core-principles>
            <principle name="single-source-truth">
                All definitions must have a single source of truth in core/model_definitions.py
            </principle>
            <principle name="modularity">
                Maintain clear separation of concerns between components
            </principle>
            <principle name="error-handling">
                Consistent error handling and logging throughout
            </principle>
            <principle name="async-session-management">
                All database operations must use async context managers with explicit transaction boundaries managed by AsyncSessionManager
            </principle>
            <principle name="repository-statefulness">
                Repositories must be stateless with session management delegated to AsyncSessionManager
            </principle>
            <principle name="persistence-boundaries">
                Repositories mark changes with flush(), services control transactions with commit()/rollback()
            </principle>
        </core-principles>

        <async-database-patterns>
            <rule id="session-management" severity="critical">
                <title>Async Session Management Patterns</title>
                <ownership-hierarchy>
                    <layer name="AsyncSessionManager">
                        Owns session lifecycle and transaction boundaries
                        Provides session factory and context managers
                        Handles commit/rollback operations
                        Single source of truth for database sessions
                    </layer>
                    <layer name="Repository">
                        Uses AsyncSessionManager for sessions
                        Uses flush() to mark changes without committing
                        Never calls commit() or rollback()
                        Maintains stateless operation
                    </layer>
                    <layer name="Service">
                        Coordinates operations within single transaction
                        Manages transaction boundaries (commit/rollback)
                        Uses repository methods through AsyncSessionManager context
                        Handles error propagation and rollback
                    </layer>
                </ownership-hierarchy>
                <correct-patterns>
                    <pattern name="session-context">
                        ```python
                        # Service layer session management
                        class DocumentService:
                            def __init__(self, session_manager: AsyncSessionManager):
                                self._session_manager = session_manager
                                self._repository = DocumentRepository(session_manager)

                            async def create_document(self, data: Dict[str, Any]) -> Document:
                                async with self._session_manager.get_session() as session:
                                    try:
                                        doc = await self._repository.create(data)
                                        await session.commit()
                                        return doc
                                    except Exception as e:
                                        await session.rollback()
                                        raise ServiceError(f"Failed to create document: {str(e)}")
                        ```
                    </pattern>
                    <pattern name="repository-pattern">
                        ```python
                        # Repository layer with proper session handling
                        class DocumentRepository:
                            def __init__(self, session_manager: AsyncSessionManager):
                                self._session_manager = session_manager
                            
                            @property
                            def session(self) -> AsyncSession:
                                return self._session_manager.get_session()

                            async def create(self, data: Dict[str, Any]) -> Document:
                                async with self.session() as session:
                                    try:
                                        entity = Document(**data)
                                        session.add(entity)
                                        await session.flush()  # Mark changes only
                                        return entity
                                    except Exception as e:
                                        raise RepositoryError(f"Failed to create: {str(e)}")
                        ```
                    </pattern>
                </correct-patterns>
                <incorrect-patterns>
                    <pattern name="unmanaged-session">
                        ```python
                        # Never use unmanaged sessions or commit in repositories
                        class BadRepository:
                            async def create(self, data: Dict[str, Any]) -> None:
                                session = self._session_factory()  # Wrong - no context
                                await session.commit()  # Wrong - repository should not commit
                        ```
                    </pattern>
                    <pattern name="service-direct-session">
                        ```python
                        # Never access session directly in service
                        class BadService:
                            def __init__(self):
                                self._session = create_session()  # Wrong - direct session creation
                        ```
                    </pattern>
                </incorrect-patterns>
                <validation-checks>
                    <check>All session creation uses async context managers</check>
                    <check>All session operations are properly awaited</check>
                    <check>Repositories never commit transactions</check>
                    <check>Services use single transaction per operation</check>
                    <check>Services must use AsyncSessionManager for transactions</check>
                    <check>Session lifecycle contained within async context</check>
                    <check>Repository methods use flush() instead of commit()</check>
                    <check>No direct session creation outside AsyncSessionManager</check>
                    <check>Repository methods only accept domain models</check>
                    <check>Repository methods only return domain models</check>
                    <check>No SQLAlchemy model imports in service layer</check>
                    <check>No direct database operations in service layer</check>
                </validation-checks>
            </rule>
        </async-database-patterns>

        <model-definitions>
            <rule id="field-definitions" severity="critical">
                <title>Single Source of Truth for Fields</title>
                <correct-pattern>
                    ```python
                    # In core/model_definitions.py
                    FIELDS = {
                        "difficulty_rating": {
                            "name": "difficulty_rating",
                            "description": "Rating from 1-5",
                            "type": "int",
                            "optional": False
                        }
                    }

                    # In other files
                    class DifficultyResult(BaseModel):
                        rating: int = Field(
                            description=FieldDefinitions.FIELDS["difficulty_rating"]["description"]
                        )
                    ```
                </correct-pattern>
                <incorrect-pattern>
                    ```python
                    class DifficultyResult(BaseModel):
                        rating: int = Field(
                            description="Rating from 1-5"  # Wrong - hardcoded description
                        )
                    ```
                </incorrect-pattern>
            </rule>
        </model-definitions>

        <domain-translation>
            <rule id="model-translation" severity="critical">
                <title>Domain and Database Model Translation</title>
                <principle>
                    Repositories must handle translation between domain and database models
                </principle>
                <correct-pattern>
                    ```python
                    # Repository handles translation
                    class DocumentRepository:
                        async def create(self, document: Document) -> Document:
                            db_doc = self._to_db_model(document)
                            session.add(db_doc)
                            await session.flush()
                            return self._to_domain_model(db_doc)
                    ```
                </correct-pattern>
                <incorrect-pattern>
                    ```python
                    # Service handling database models directly
                    class DocumentService:
                        async def create(self, data: Dict[str, Any]):
                            db_doc = SourceDocument(**data)  # Wrong - service shouldn't know about DB models
                    ```
                </incorrect-pattern>
            </rule>
        </domain-translation>

        <session-passing>
            <rule id="session-delegation" severity="critical">
                <title>Session Delegation Pattern</title>
                <correct-pattern>
                    ```python
                    # Service creates and manages session
                    async with session_manager.get_session() as session:
                        # Pass session to repository operations
                        await repository.create(document, session=session)
                    ```
                </correct-pattern>
                <incorrect-pattern>
                    ```python
                    # Repository creating own sessions
                    async def create(self, document: Document):
                        async with self._session_manager.get_session() as session:  # Wrong
                    ```
                </incorrect-pattern>
            </rule>
        </session-passing>

        <repository-state>
            <rule id="state-management" severity="critical">
                <principle>
                    Repositories must be stateless and not maintain session state
                </principle>
                <correct-pattern>
                    ```python
                    class DocumentRepository:
                        async def create(self, document: Document, session: AsyncSession):
                            # Use provided session
                            session.add(self._to_db_model(document))
                    ```
                </correct-pattern>
                <incorrect-pattern>
                    ```python
                    class DocumentRepository:
                        def __init__(self):
                            self._current_session = None  # Wrong - storing session state
                    ```
                </incorrect-pattern>
            </rule>
        </repository-state>

        <service-layer>
            <rule id="service-responsibilities" severity="critical">
                <responsibilities>
                    <item>Work only with domain models</item>
                    <item>Control transaction boundaries</item>
                    <item>Coordinate multiple repository operations</item>
                    <item>Handle business logic validation</item>
                </responsibilities>
                <correct-pattern>
                    ```python
                    class DocumentService:
                        async def process_document(self, document: Document):
                            async with self._session_manager.get_session() as session:
                                # Multiple repository operations in single transaction
                                doc = await self.repository.create(document, session)
                                await self.repository.process_segments(doc.id, session)
                                await session.commit()
                    ```
                </correct-pattern>
            </rule>
        </service-layer>

        <agent-implementation>
            <rule id="abstract_methods" severity="critical">
                <title>Implement All Abstract Methods</title>
                <required-methods>
                    <method name="process_content">Process single piece of content</method>
                    <method name="store_result">Store processing results</method>
                    <method name="update_status">Update processing status flags</method>
                    <method name="get_unprocessed_segments">Get segments needing processing</method>
                </required-methods>
                <example>
                    ```python
                    class MyAgent(BaseAgent):
                        async def process_content(self):
                            # Implementation required
                        
                        async def store_result(self):
                            # Implementation required
                        
                        async def update_status(self):
                            # Implementation required
                    ```
                </example>
            </rule>
        </agent-implementation>

        <workflow>
            <field-modifications>
                <steps>
                    <step>1. Update core/model_definitions.py</step>
                    <step>2. Run python -m utils.validate_models</step>
                    <step>3. Fix validation errors</step>
                    <step>4. Update tests</step>
                </steps>
            </field-modifications>

            <validation>
                <command>grep -r "description=\"" . --include="*.py" --exclude="model_definitions.py"</command>
                <purpose>Find unauthorized hardcoded descriptions</purpose>
            </validation>
            
            <async-validation>
                <command>grep -r "async\|await" . --include="*.py"</command>
                <purpose>Verify consistent async/await usage</purpose>
            </async-validation>
        </workflow>

        <common-pitfalls>
            <pitfall>Defining field properties in multiple places</pitfall>
            <pitfall>Writing hardcoded descriptions</pitfall>
            <pitfall>Skipping validation after changes</pitfall>
            <pitfall>Using bare try/except blocks</pitfall>
            <pitfall>Missing await statements on async operations</pitfall>
            <pitfall>Mixing sync and async session handling</pitfall>
            <pitfall>Unmanaged database sessions</pitfall>
            <pitfall>Unclear transaction boundaries</pitfall>
            <pitfall>Not properly closing sessions</pitfall>
        </common-pitfalls>

        <llm-instructions>
            Before modifying any code:
            1. Check if changes affect field definitions
            2. Verify abstract method implementations
            3. Run validation commands
            4. Review common pitfalls
            5. Verify async/await consistency
            6. Check session management patterns

            When implementing database operations:
            1. Always use async context managers for sessions
            2. Ensure proper transaction boundaries
            3. Handle session cleanup correctly
            4. Maintain consistent async patterns

            When implementing agents:
            1. Implement ALL required abstract methods
            2. Maintain consistent error handling
            3. Follow single source of truth principle
            4. Update documentation appropriately
            5. Ensure proper async/await usage
        </llm-instructions>
    </development-rules>
</project-rules>
