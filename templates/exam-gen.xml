<?xml version='1.0' encoding='utf-8'?>
<project-rules extends="base.xml">
    <development-rules>
        <core-principles>
            <principle name="single-source-truth">
                All definitions must have a single source of truth in core/model_definitions.py
            </principle>
            <principle name="modularity">
                Maintain clear separation of concerns between components
            </principle>
            <principle name="error-handling">
                Consistent error handling and logging throughout
            </principle>
            <principle name="async-consistency">
                All database operations must follow consistent async patterns with explicit session management
            </principle>
            <principle name="session-management">
                Database sessions must be managed through async context managers with clear transaction boundaries
            </principle>
        </core-principles>

        <async-database-patterns>
            <rule id="session-management" severity="critical">
                <title>Async Session Management Patterns</title>
                <correct-patterns>
                    <pattern name="session-context">
                        ```python
                        # Always use async context managers for sessions
                        async with self.session() as session:
                            try:
                                result = await session.execute(query)
                                await session.commit()
                            except SQLAlchemyError as e:
                                await session.rollback()
                                raise DatabaseError(f"Operation failed: {str(e)}")
                        ```
                    </pattern>
                    <pattern name="session-provider">
                        ```python
                        # Session factory pattern
                        @asynccontextmanager
                        async def get_session(self) -> AsyncGenerator[AsyncSession, None]:
                            async with self._session_factory() as session:
                                try:
                                    yield session
                                finally:
                                    await session.close()
                        ```
                    </pattern>
                </correct-patterns>
                <incorrect-patterns>
                    <pattern name="mixed-async">
                        ```python
                        # Never mix sync/async operations
                        def get_session(self):
                            return self._session_factory()  # Wrong - sync return
                        ```
                    </pattern>
                    <pattern name="unmanaged-session">
                        ```python
                        # Never use unmanaged sessions
                        async def operation(self):
                            session = self._session_factory()  # Wrong - no context
                            result = await session.execute(query)
                        ```
                    </pattern>
                </incorrect-patterns>
                <validation-checks>
                    <check>All session creation uses async context managers</check>
                    <check>All session operations are properly awaited</check>
                    <check>All transaction boundaries are explicit</check>
                    <check>No mixing of sync and async patterns</check>
                    <check>All sessions are properly closed</check>
                </validation-checks>
            </rule>
        </async-database-patterns>

        <model-definitions>
            <rule id="field-definitions" severity="critical">
                <title>Single Source of Truth for Fields</title>
                <correct-pattern>
                    ```python
                    # In core/model_definitions.py
                    FIELDS = {
                        "difficulty_rating": {
                            "name": "difficulty_rating",
                            "description": "Rating from 1-5",
                            "type": "int",
                            "optional": False
                        }
                    }

                    # In other files
                    class DifficultyResult(BaseModel):
                        rating: int = Field(
                            description=FieldDefinitions.FIELDS["difficulty_rating"]["description"]
                        )
                    ```
                    Note the use of `BaseModel` since we are using Field definitions with descriptions
                </correct-pattern>
                <incorrect-pattern>
                    ```python
                    # Never do this
                    class DifficultyResult(BaseModel):
                        rating: int = Field(
                            description="Rating from 1-5"  # Hardcoded description
                        )
                    ```
                </incorrect-pattern>
            </rule>
        </model-definitions>

        <agent-implementation>
            <rule id="abstract_methods" severity="critical">
                <title>Implement All Abstract Methods</title>
                <required-methods>
                    <method name="process_content">Process single piece of content</method>
                    <method name="store_result">Store processing results</method>
                    <method name="update_status">Update processing status flags</method>
                    <method name="get_unprocessed_segments">Get segments needing processing</method>
                </required-methods>
                <example>
                    ```python
                    class MyAgent(BaseAgent):
                        async def process_content(self):
                            # Implementation required
                        
                        async def store_result(self):
                            # Implementation required
                        
                        async def update_status(self):
                            # Implementation required
                    ```
                </example>
            </rule>
        </agent-implementation>

        <workflow>
            <field-modifications>
                <steps>
                    <step>1. Update core/model_definitions.py</step>
                    <step>2. Run python -m utils.validate_models</step>
                    <step>3. Fix validation errors</step>
                    <step>4. Update tests</step>
                </steps>
            </field-modifications>

            <validation>
                <command>grep -r "description=\"" . --include="*.py" --exclude="model_definitions.py"</command>
                <purpose>Find unauthorized hardcoded descriptions</purpose>
            </validation>
            
            <async-validation>
                <command>grep -r "async\|await" . --include="*.py"</command>
                <purpose>Verify consistent async/await usage</purpose>
            </async-validation>
        </workflow>

        <common-pitfalls>
            <pitfall>Defining field properties in multiple places</pitfall>
            <pitfall>Writing hardcoded descriptions</pitfall>
            <pitfall>Skipping validation after changes</pitfall>
            <pitfall>Using bare try/except blocks</pitfall>
            <pitfall>Missing await statements on async operations</pitfall>
            <pitfall>Mixing sync and async session handling</pitfall>
            <pitfall>Unmanaged database sessions</pitfall>
            <pitfall>Unclear transaction boundaries</pitfall>
            <pitfall>Not properly closing sessions</pitfall>
        </common-pitfalls>

        <llm-instructions>
            Before modifying any code:
            1. Check if changes affect field definitions
            2. Verify abstract method implementations
            3. Run validation commands
            4. Review common pitfalls
            5. Verify async/await consistency
            6. Check session management patterns

            When implementing database operations:
            1. Always use async context managers for sessions
            2. Ensure proper transaction boundaries
            3. Handle session cleanup correctly
            4. Maintain consistent async patterns

            When implementing agents:
            1. Implement ALL required abstract methods
            2. Maintain consistent error handling
            3. Follow single source of truth principle
            4. Update documentation appropriately
            5. Ensure proper async/await usage
        </llm-instructions>
    </development-rules>
</project-rules>
